
#!/bin/bash

# Get project name from directory name
PROJECT_NAME=$(basename $(pwd))
ENV_NAME=$(echo $PROJECT_NAME | tr '-' '_')

echo "Setting up project: $PROJECT_NAME"

# Ask about conda environment
read -p "Create a dedicated conda environment? (y/n): " CREATE_ENV
if [[ "$CREATE_ENV" == "y" ]]; then
    # Create conda environment specific to this project
    if [ -f ~/miniconda3/etc/profile.d/conda.sh ]; then
        source ~/miniconda3/etc/profile.d/conda.sh
    elif [ -f /c/Users/Admin/miniconda3/etc/profile.d/conda.sh ]; then
        source /c/Users/Admin/miniconda3/etc/profile.d/conda.sh
    else
        echo "WARNING: conda.sh not found. Trying to use conda directly."
    fi
    
    conda create -y -n $ENV_NAME python=3.9
    conda activate $ENV_NAME
    
    # Install basic dependencies
    conda install -y numpy pandas matplotlib jupyter ipykernel
    
    echo "# Generated by conda environment creation" > environment.yml
    conda env export > environment.yml
    
    echo "Created conda environment: $ENV_NAME"
else
    echo "Skipping conda environment creation."
fi

# Create modern ML project structure
mkdir -p src/$PROJECT_NAME/{data,models,utils,visualization}
mkdir -p notebooks tests configs data results docs

# Create __init__.py files to make the modules importable
touch src/$PROJECT_NAME/__init__.py
touch src/$PROJECT_NAME/data/__init__.py
touch src/$PROJECT_NAME/models/__init__.py
touch src/$PROJECT_NAME/utils/__init__.py
touch src/$PROJECT_NAME/visualization/__init__.py

# Create setup.py for easier importing
cat > setup.py << EOL
from setuptools import setup, find_packages

setup(
    name="$PROJECT_NAME",
    version="0.1",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
)
EOL

# Create basic files
touch requirements.txt
cat > requirements.txt << EOL
# Core Data Science
numpy
pandas
matplotlib
scikit-learn

# Notebooks
jupyter
ipykernel

# Development
pytest
black
flake8

# Add your additional requirements here
EOL

# Create README with better documentation
cat > README.md << EOL
# $PROJECT_NAME

## Setup
\`\`\`bash
# Clone the repository
git clone https://github.com/Amanpatni211/$PROJECT_NAME.git
cd $PROJECT_NAME

# Option 1: Create and activate conda environment
conda env create -f environment.yml
conda activate $ENV_NAME

# Option 2: Install in existing environment
pip install -e .
pip install -r requirements.txt
\`\`\`

## Project Structure
\`\`\`
├── configs/          # Configuration files
├── data/             # Raw and processed data (not in Git)
├── docs/             # Documentation
├── notebooks/        # Jupyter notebooks
├── results/          # Output of experiments (not in Git)
├── src/              # Source code
│   └── $PROJECT_NAME/
│       ├── data/     # Data processing
│       ├── models/   # ML models
│       ├── utils/    # Utilities
│       └── visualization/ # Plotting and visualization
└── tests/            # Unit tests
\`\`\`

## License
Copyright (c) $(date +%Y) [Your Name]
EOL

# Initialize git repository
git init
echo "data/" >> .gitignore
echo "results/" >> .gitignore
echo ".ipynb_checkpoints/" >> .gitignore
echo "__pycache__/" >> .gitignore
echo "*.pyc" >> .gitignore
echo "*.egg-info/" >> .gitignore
echo ".vscode/" >> .gitignore
echo ".idea/" >> .gitignore

# Create config template
mkdir -p configs
cat > configs/default.yml << EOL
# Project configuration
project_name: $PROJECT_NAME
data_path: data/
results_path: results/
EOL

# Create example notebook
mkdir -p notebooks
cat > notebooks/01_exploration.ipynb << EOL
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# $PROJECT_NAME: Data Exploration\n",
    "Created: $(date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "import sys\n",
    "sys.path.append(\"..\")\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Import project modules\n",
    "from src.$PROJECT_NAME.utils import config\n",
    "\n",
    "%matplotlib inline"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOL

# Create a simple utility module for configuration
mkdir -p src/$PROJECT_NAME/utils
cat > src/$PROJECT_NAME/utils/config.py << EOL
"""Configuration utilities."""
import os
import yaml

def load_config(config_path="configs/default.yml"):
    """Load configuration from YAML file."""
    with open(config_path, "r") as f:
        return yaml.safe_load(f)
EOL

echo "Project setup complete!" 